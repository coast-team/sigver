#!/usr/bin/env node
function error(e,o,r){console.log("Error "+o+": "+r),e.close(o,r)}function start(e,o){var r=arguments.length<=2||void 0===arguments[2]?function(){}:arguments[2];server=new WebSocketServer({host:e,port:o},function(){console.log("Server runs on: "+e+":"+o),r()}),server.on("connection",function(e){e.on("message",function(o){var r=void 0;try{r=JSON.parse(o)}catch(o){error(e,MESSAGE_TYPE_ERROR,"Server accepts only JSON string")}if("key"in r)keys.has(r.key)?(e.send('{"isKeyOk":false}'),error(e,KEY_ALREADY_EXISTS,"The key already exists")):(e.send('{"isKeyOk":true}'),e.joiningSockets=[],keys.set(r.key,e));else if("id"in r)e.joiningSockets[+r.id].send(JSON.stringify({data:r.data}));else if("join"in r)if(keys.has(r.join)){e.keyHolder=keys.get(r.join);var n=e.keyHolder.joiningSockets.length;e.keyHolder.joiningSockets[n]=e,e.send('{"isJoinOk":true}'),"data"in r&&e.keyHolder.send(JSON.stringify({id:n,data:r.data}))}else e.send('{"isJoinOk":false}'),error(e,KEY_UNKNOWN,"Unknown key");else if("data"in r){var s=e.keyHolder.joiningSockets.indexOf(e);"keyHolder"in e?e.keyHolder.send(JSON.stringify({id:s,data:r.data})):console.log("The client "+s+" has not been assigned yet to a keyHolder")}else error(e,MESSAGE_UNKNOWN_ATTRIBUTE,"Unknown JSON attribute: "+o)}),e.on("close",function(o){if("keyHolder"in e){var r=e.keyHolder.joiningSockets.indexOf(e);e.keyHolder.readyState===OPEN&&e.keyHolder.send(JSON.stringify({id:r,unavailable:!0})),e.keyHolder.joiningSockets.splice(r,1)}else{var n=!0,s=!1,i=void 0;try{for(var t,a=e.joiningSockets[Symbol.iterator]();!(n=(t=a.next()).done);n=!0){var l=t.value;l.close(KEY_NO_LONGER_AVAILABLE,"The peer with this key is no longer available")}}catch(e){s=!0,i=e}finally{try{!n&&a.return&&a.return()}finally{if(s)throw i}}}}),e.on("error",function(e){console.log("ERROR: ",e)})})}var WebSocketServer=require("ws").Server,OPEN=require("ws").OPEN,MESSAGE_TYPE_ERROR=4e3,MESSAGE_UNKNOWN_ATTRIBUTE=4001,KEY_ALREADY_EXISTS=4002,KEY_UNKNOWN=4003,KEY_NO_LONGER_AVAILABLE=4004,server=void 0,keys=new Map,program=require("commander"),host=process.env.NODE_IP||"localhost",port=process.env.NODE_PORT||8e3;program.version("7.4.2","-v, --version").option("-h, --host <n>",'specify host (DEFAULT: process.env.NODE_IP || "localhost")').option("-p, --port <n>","specify port (DEFAULT: process.env.NODE_PORT || 8000)").on("--help",function(){console.log("  Examples:\n\n     $ sigver\n     $ sigver -h 192.168.0.1 -p 9000\n")}).parse(process.argv),program.host&&(host=program.host),program.port&&(port=program.port),start(host,port);