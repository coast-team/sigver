syntax = "proto3";

message Message {
  oneof type {
    /*
    * Incoming and outcoming messages
    */
    // Server sends `heartbeat` message each 5 seconds and expects getting the
    // same message back. If after 3 tentatives still no response then close the
    // connection.
    bool heartbeat = 1;
    Content content = 2; // Message to be exchanged between two peers.

    /*
    * Incoming message
    */
    // Peer either wants to make sure that he is still a group member or wants
    // to become one.
    GroupData connect = 3;

    /*
    * Outcoming message
    */
    // Response to the connect request above. True if the peer is the only member
    // of the group or he is connected to at least one group member. Otherwise the
    // signaling server subscribes this peer to one of the group member (i.e. the 
    // content message maybe exchanged) .
    bool connected = 4; 
  }
}

message Content {
  uint32 senderId = 1;
  uint32 recipientId = 2;
  bool lastData = 3; // Forward last data and unsubscribe from the peer
  bytes data = 4; // Any data sent by the peer
}

message GroupData {
  uint32 id = 1; // Current peer id in the group
  repeated uint32 members = 2; // Peer's members view. Maybe an empty array.
}
